- must be able to override already existing #logger with proper DSl
- logger.debug method (and alike) should accept block for performance reason
- writing messages in any encoding
- test against 'logging' framework
- test with Rails
- when logger specified in :to => ... then lib must complain unless formatting and logging code to that specific logger class was not defined

- :fsync option after :to => Logger.... or similar, otherwise it is getting annoying to write:
  log = open(File.join(log_path, 'log.log'),"w")
  debug GData::Cacher, :to => Logger.new(log) do
    log.fsync
  end


- figure out how profiling info could be displayed on New Relic
  May be:

  instrument object, :method

   monkey patchs method with

   logger.debug("MethodName()/started")
   ...
   logger.debug("MethodName()/stopped")

                            
  create special logger for instrumentation:
  StatisticsLogger

  so somebody may write:
  
  instrument object, :method, :to => StatisticsLogger.new( file, :interval => 100 )
  #may be not a file, but mongodb connection

  instrument object, :method, :to => NewRelicLogger.new

  The StatisticsLogger is for monitoring/troubleshouting, it supposed to help answer questions like:
  - how my app behaves in average
  
  The NewRelicLogger simply redirects all sampling to newrelic_rpm

